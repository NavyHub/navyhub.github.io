<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Jimmy Song</title>
    <link>https://jimmysong.io/tags/go/</link>
    <description>Recent content in Go on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>jimmysong@jimmysong.io (Jimmy Song(宋净超))</managingEditor>
    <webMaster>jimmysong@jimmysong.io (Jimmy Song(宋净超))</webMaster>
    <lastBuildDate>Sun, 29 Oct 2017 15:24:19 +0800</lastBuildDate>
    
	<atom:link href="https://jimmysong.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cloudinary Go</title>
      <link>https://jimmysong.io/posts/cloudinary-go/</link>
      <pubDate>Sun, 29 Oct 2017 15:24:19 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/cloudinary-go/</guid>
      <description>Cloudinary-go is a Go client library and CLI tool to upload static assets to the Cloudinary service.
Installation Install the CLI tool and the library with:
go get github.com/rootsongjc/cloudinary-go/cloudinary  Or download the release binary from release.
Configuration Create a default configuration file named ${HOME}/.cloudinary.toml
[cloudinary] uri=cloudinary://api_key:api_secret@cloud_name # check your cloudinary dashboard to the the uri prepend = &amp;quot;images&amp;quot; # default cloudinary folder  Usage A CLI tool to upload static assets to the Cloudinary service.</description>
    </item>
    
    <item>
      <title>Hugo handbook</title>
      <link>https://jimmysong.io/posts/building-static-website-with-hugo/</link>
      <pubDate>Mon, 16 Oct 2017 22:30:35 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/building-static-website-with-hugo/</guid>
      <description>很多人问我 jimmysong.io 这个网站是怎么做出来的，我想有必要写本书给大家普及下静态网站构建的知识还有Hugo这个利器。 本手册将指导你如何使用Hugo构建静</description>
    </item>
    
    <item>
      <title>适用于kubernetes的应用开发与部署流程详解</title>
      <link>https://jimmysong.io/posts/deploy-applications-in-kubernetes/</link>
      <pubDate>Thu, 20 Jul 2017 19:41:53 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/deploy-applications-in-kubernetes/</guid>
      <description>本文已归档在kubernetes-handbook中的第3章【用户指南】中，一切更新以kubernetes-handbook中为准。 为了详细</description>
    </item>
    
    <item>
      <title>Kubernetes中的服务发现与docker容器间的环境变量传递源码探究</title>
      <link>https://jimmysong.io/posts/exploring-kubernetes-env-with-docker/</link>
      <pubDate>Wed, 19 Jul 2017 23:15:01 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/exploring-kubernetes-env-with-docker/</guid>
      <description>前言 今天创建了两个kubernetes示例应用： k8s-app-monitor-test：启动server用来产生metrics k8s-ap</description>
    </item>
    
    <item>
      <title>kubernetes client-go包使用示例</title>
      <link>https://jimmysong.io/posts/kubernetes-client-go-sample/</link>
      <pubDate>Wed, 21 Jun 2017 19:23:45 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/kubernetes-client-go-sample/</guid>
      <description>前言 本文将归档到kubernetes-handbook的【开发指南—client-go示例】章节中，最终版本以kubernetes-hand</description>
    </item>
    
    <item>
      <title>Cloud Native Go - 基于Go和React的web云原生应用构建指南</title>
      <link>https://jimmysong.io/posts/cloud-native-go/</link>
      <pubDate>Tue, 06 Jun 2017 22:23:54 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/cloud-native-go/</guid>
      <description>Kevin Hoffman和Dan Nemeth著的《Cloud Native Go - 基于Go和React的web云原生应用构建指南》已由电子工业出版社出版。 扫码购买 简</description>
    </item>
    
    <item>
      <title>Go语言中的并发编程总结</title>
      <link>https://jimmysong.io/posts/golang-concurrency-summary/</link>
      <pubDate>Fri, 24 Mar 2017 08:36:29 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/golang-concurrency-summary/</guid>
      <description>Go语言并发编程总结 Golang :不要通过共享内存来通信，而应该通过通信来共享内存。这句风靡在Go社区的话,说的就是 goroutine中的 channe</description>
    </item>
    
    <item>
      <title>Docker17.03-CE插件开发案例</title>
      <link>https://jimmysong.io/posts/docker-plugin-develop/</link>
      <pubDate>Wed, 15 Mar 2017 13:57:26 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/docker-plugin-develop/</guid>
      <description>当你看到这篇文章时，如果你也正在进行docker1.13+版本下的plugin开发，恭喜你也入坑了，如果你趟出坑，麻烦告诉你的方法，感恩不尽</description>
    </item>
    
    <item>
      <title>Docker 17.03-CE create plugin源码解析</title>
      <link>https://jimmysong.io/posts/docker-create-plugin/</link>
      <pubDate>Wed, 15 Mar 2017 12:09:26 +0800</pubDate>
      <author>jimmysong@jimmysong.io (Jimmy Song(宋净超))</author>
      <guid>https://jimmysong.io/posts/docker-create-plugin/</guid>
      <description>继续上一篇Docker17.03-CE插件开发的🌰，今天来看下docker create plugin的源码。 cli/command/plugin/create.go Docker命令行docker plugin creat</description>
    </item>
    
  </channel>
</rss>